#pragma pack(1)

#define RADACQUIRE_OPCODE 0x58
struct RADAcquireRecord
{
	BYTE	bLength;				//1 byte
	BYTE	bOpcode;				//1 byte
	unsigned int uiJulianSeconds;	//4 bytes
	unsigned char ucJulianSec10ths;	//1 byte
	BYTE	bStatusByte0;			//1 byte
	BYTE	bStatusByte1;			//1 byte
	BYTE	bStatusByte2;			//1 byte
	BYTE	bStatusByte3;			//1 byte
	BYTE	bPPInputState;			//1 byte
	BYTE	bCh0Status;				//1 byte
	float	fCh0CountRate;			//4 bytes
	float	fCh0ShortCountRate;		//4 bytes
	float	fCh0LongCountRate;		//4 bytes
	BYTE	bCh1Status;				//1 byte
	float	fCh1CountRate;			//4 bytes
	float	fCh1ShortCountRate;		//4 bytes
	float	fCh1LongCountRate;		//4 bytes
	BYTE	bCh2Status;				//1 byte
	float	fCh2CountRate;			//4 bytes
	float	fCh2ShortCountRate;		//4 bytes
	float	fCh2LongCountRate;		//4 bytes
	BYTE	bCh3Status;				//1 byte
	float	fCh3CountRate;			//4 bytes
	float	fCh3ShortCountRate;		//4 bytes
	float	fCh3LongCountRate;		//4 bytes
	float	fCPUTemp;				//4 bytes
	float	fBOARDTemp;				//4 byres
	unsigned int uiCountTime10ths;	//4 bytes
};

#define ESBACQUIRE_OPCODE 0x59									
struct ESBAcquireRecord
{
	BYTE	bLength;				//1 byte
	BYTE	bOpcode;				//1 byte
	unsigned int uiJulianSeconds;	//4 bytes
	unsigned char ucJulianSec10ths;	//1 byte
	BYTE	bStatusByte0;			//1 byte
	BYTE	bStatusByte1;			//1 byte
	BYTE	bStatusByte2;			//1 byte
	BYTE	bStatusByte3;			//1 byte
	unsigned short usAccelerometer;	//2 bytes
	BYTE	 ubHumidity;			//1 byte
	unsigned short usLightInt;		//2 bytes
	unsigned short usMagnetometerX;	//2 bytes
	unsigned short usMagnetometerY;	//2 bytes
	unsigned short usMagnetometerZ;	//2 bytes
	unsigned short usSurfWetness;	//2 bytes
	float	fCPUTemp;				//4 bytes
	float	fBOARDTemp;				//4 byres
	unsigned int uiCountTime10ths;	//4 bytes
	BYTE     bESBSerialNumber[6];	//6 bytes
};									

union BinaryRecordX{
	struct {
		BYTE bLength;
		BYTE bOpcode;
		BYTE bBytes[254];
	};
	RADAcquireRecord RADAcquireRec;
	ESBAcquireRecord ESBAcquireRec;
};
#pragma pack()

==========================================================================
if ((iLength = fgetc(infile)) != EOF)
{
	XRecord.bLength = (BYTE)iLength; //fgetc returns an int or a char
	if ((iOpcode = fgetc(infile)) != EOF)
	{
		XRecord.bOpcode = (BYTE)iOpcode;
		if (fread(&XRecord.bBytes,1,XRecord.bLength-2,infile))
		{
			switch (XRecord.bOpcode) {
			case RADACQUIRE_OPCODE:
				{
					CJulianTime cJulianTime;
					cJulianTime.Init(XRecord.RADAcquireRec.uiJulianSeconds);
				
					fprintf(outfile,"%02x %s %s.%d %10u.%d %02x %02x %02x %02x %1x %02x %12g %12g %12g %02x %12g %12g %12g %02x %12g %12g %12g %02x %12g %12g %12g %+6.1f %+6.1f %8.1f\n",
						XRecord.bOpcode,
						cJulianTime.Date(),
						cJulianTime.Time(),
						XRecord.RADAcquireRec.ucJulianSec10ths,
						XRecord.RADAcquireRec.uiJulianSeconds,
						XRecord.RADAcquireRec.ucJulianSec10ths,
						XRecord.RADAcquireRec.bStatusByte0,
						XRecord.RADAcquireRec.bStatusByte1,
						XRecord.RADAcquireRec.bStatusByte2,
						XRecord.RADAcquireRec.bStatusByte3,
						XRecord.RADAcquireRec.bPPInputState,
						XRecord.RADAcquireRec.bCh0Status,
						XRecord.RADAcquireRec.fCh0CountRate,
						XRecord.RADAcquireRec.fCh0ShortCountRate,
						XRecord.RADAcquireRec.fCh0LongCountRate,
						XRecord.RADAcquireRec.bCh1Status,
						XRecord.RADAcquireRec.fCh1CountRate,
						XRecord.RADAcquireRec.fCh1ShortCountRate,
						XRecord.RADAcquireRec.fCh1LongCountRate,
						XRecord.RADAcquireRec.bCh2Status,
						XRecord.RADAcquireRec.fCh2CountRate,
						XRecord.RADAcquireRec.fCh2ShortCountRate,
						XRecord.RADAcquireRec.fCh2LongCountRate,
						XRecord.RADAcquireRec.bCh3Status,
						XRecord.RADAcquireRec.fCh3CountRate,
						XRecord.RADAcquireRec.fCh3ShortCountRate,
						XRecord.RADAcquireRec.fCh3LongCountRate,
						XRecord.RADAcquireRec.fCPUTemp,
						XRecord.RADAcquireRec.fBOARDTemp,
						((float)XRecord.RADAcquireRec.uiCountTime10ths)/10.0);
				}
				break;
			case ESBACQUIRE_OPCODE:
				break;
			//add case statements for each record you need to crack
			default:
			}
		}
	}
}
